//
//  SyncManager.swift
//  GM Helper v2
//
//  Created by Tim W. Newton on 2/24/25.
//  Generated by Grok 3
//  https://grok.com/chat/91175ca7-3052-4985-b326-ea8baee51970?referrer=website


import SwiftUI
import Foundation

class SyncManager  {
    static let userPrefs = SyncManager()
//    @Published static var userPrefs = SyncManager()
    // Local storage keys (all preferences)
//    @AppStorage("theme") private var theme: String = "light"
//    @AppStorage("fontSize") private var fontSize: Double = 16.0
//    @AppStorage("username") private var username: String = "Guest"
    @AppStorage("syncEnabled") private var syncEnabled: Bool = false // Not synced, keep local
    
    @AppStorage(AppStorageKey.importMonstersA5e.rawValue) private var monstersA5e: Bool = true
    @AppStorage(AppStorageKey.importMonstersWoTC.rawValue) private var monstersWoTC: Bool = true
    @AppStorage(AppStorageKey.importSpellsA5e.rawValue) private var spellsA5e: Bool = true
    @AppStorage(AppStorageKey.importSpellsWoTC.rawValue) private var spellsWoTC: Bool = true
    
    @AppStorage(AppStorageKey.importTreasuresA5e.rawValue) private var treasuresA5e: Bool = true
    @AppStorage(AppStorageKey.importTreasuresWoTC.rawValue) private var treasuresWoTC: Bool = true

    // iCloud store reference
    private let iCloudStore = NSUbiquitousKeyValueStore.default

    // Keys eligible for iCloud syncing
    private enum SyncKeys: String {
        case monstersA5e
        case monstersWoTC
        case spellsA5e
        case spellsWoTC
        case treasuresA5e
        case treasuresWoTC
    }

    // Initialize and sync from iCloud if available
    private init() {
        // Register for iCloud updates
        NotificationCenter.default.addObserver(
            forName: NSUbiquitousKeyValueStore.didChangeExternallyNotification,
            object: iCloudStore,
            queue: .main
        ) { notification in
            self.handleiCloudChanges(notification)
        }
        
        // Perform initial sync
        iCloudStore.synchronize()
        loadFromiCloud()
    }

    // MARK: - Public API

    // Accessors for all preferences
    var importMonstersA5e: Bool {
        get { monstersA5e }
        set {
            monstersA5e = newValue
            syncIfNeeded(key: .monstersA5e, value: newValue)
        }
    }
    
    var importMonstersWoTC: Bool {
        get { monstersWoTC }
        set {
            monstersWoTC = newValue
            syncIfNeeded(key: .monstersWoTC, value: newValue)
        }
    }
    
    var importSpellsA5e: Bool {
        get { spellsA5e }
        set {
            spellsA5e = newValue
            syncIfNeeded(key: .spellsA5e, value: newValue)
        }
    }
    
    var importSpellsWoTC: Bool {
        get { spellsWoTC }
        set {
            spellsWoTC = newValue
            syncIfNeeded(key: .spellsWoTC, value: newValue)
        }
    }
    
    var importTreasuresA5e: Bool {
        get { treasuresA5e }
        set {
            treasuresA5e = newValue
            syncIfNeeded(key: .treasuresA5e, value: newValue)
        }
    }
    
    var importTreasuresWoTC: Bool {
        get { treasuresWoTC }
        set {
            treasuresWoTC = newValue
            syncIfNeeded(key: .treasuresWoTC, value: newValue)
        }
    }

    var isSyncEnabled: Bool {
        get { syncEnabled }
        set { syncEnabled = newValue }
    }

    // MARK: - Private Sync Logic
    
    private func syncIfNeeded(key: SyncKeys, value: Any) {
        guard syncEnabled else { return }
        iCloudStore.set(value, forKey: key.rawValue)
        iCloudStore.synchronize()
    }

    private func loadFromiCloud() {
        guard isSyncEnabled else { return }
        
        monstersA5e = iCloudStore.bool(forKey: SyncKeys.monstersA5e.rawValue)
        monstersWoTC = iCloudStore.bool(forKey: SyncKeys.monstersWoTC.rawValue)
        
        spellsA5e = iCloudStore.bool(forKey: SyncKeys.spellsA5e.rawValue)
        spellsWoTC = iCloudStore.bool(forKey: SyncKeys.spellsWoTC.rawValue)
        
        treasuresA5e = iCloudStore.bool(forKey: SyncKeys.treasuresA5e.rawValue)
        treasuresWoTC = iCloudStore.bool(forKey: SyncKeys.treasuresWoTC.rawValue)
    }

    private func handleiCloudChanges(_ notification: Notification) {
        guard let userInfo = notification.userInfo,
              let reason = userInfo[NSUbiquitousKeyValueStoreChangeReasonKey] as? Int else { return }

        // Handle different change reasons (e.g., server update, initial sync)
        switch reason {
        case NSUbiquitousKeyValueStoreServerChange, NSUbiquitousKeyValueStoreInitialSyncChange:
            loadFromiCloud()
        default:
            break
        }
    }

    // Clean up
    deinit {
        NotificationCenter.default.removeObserver(
            self,
            name: NSUbiquitousKeyValueStore.didChangeExternallyNotification,
            object: iCloudStore
        )
    }
}

// Example usage in a SwiftUI View
struct SettingsView: View {
//    @StateObject private var syncManager = SyncManager()
    @State private var isSyncEnabled: Bool = SyncManager.userPrefs.isSyncEnabled

    var body: some View {
        Form {
            Toggle("Enable iCloud Sync", isOn: $isSyncEnabled)
                .onChange(of: isSyncEnabled) { _, newValue in
                    SyncManager.userPrefs.isSyncEnabled = newValue
                }
            
//            Toggle("Other Enable iCloud Sync", isOn: SyncManager.$userPrefs.isSyncEnabled)
//            Picker("Theme", selection: $syncManager.currentImportMonstersA5e) {
//                Text("Light").tag("light")
//                Text("Dark").tag("dark")
//            }
//            Slider(value: $syncManager.currentFontSize, in: 12...24, step: 1)
//            TextField("Username", text: $syncManager.currentUsername)
        }
    }
}
